generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String   @unique()
  hashedPassword String
  email          String   @unique()
  createdAt      DateTime @default(now())
  profile        Profile  @relation(fields: [profileId], references: [id])
  profileId      String

  tweets              Tweet[]
  Like                Like[]
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String?          @unique
  credentials         UserCredential[]
  following           UserFollows[]    @relation("UserFollowsUser")
  followers           UserFollows[]    @relation("UserFollowsTarget")
  Notification        Notification[]
}

model UserFollows {
  id        String   @id @default(uuid())
  user      User     @relation("UserFollowsUser", fields: [userId], references: [id])
  userId    String
  target    User     @relation("UserFollowsTarget", fields: [targetId], references: [id])
  targetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("user_follows")
}

model UserCredential {
  id         String  @id
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

enum Theme {
  DARK
  LIGHT
}

model Profile {
  id          String  @id @default(cuid())
  image       String? @default("https://orzynjfzqvaqslllunuk.supabase.co/storage/v1/object/public/user-images/Portrait_Placeholder.png")
  displayName String
  theme       Theme   @default(LIGHT)
  bio         String?
  location    String?
  website     String?
  birth       String?
  User        User[]
}

model Tweet {
  id           String         @id @default(cuid())
  text         String
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  likes        Like[]
  repliesToId  String?
  repliesTo    Tweet?         @relation("RepliesTo", fields: [repliesToId], references: [id])
  replies      Tweet[]        @relation("RepliesTo")
  retweetId    String?
  retweet      Tweet?         @relation("Retweets", fields: [retweetId], references: [id])
  retweets     Tweet[]        @relation("Retweets")
  Notification Notification[]
}

model Notification {
  id      String            @id @default(cuid())
  user    User              @relation(fields: [userId], references: [id])
  tweet   Tweet             @relation(fields: [tweetId], references: [id])
  event   NotificationEvent
  userId  String
  tweetId String
}

enum NotificationEvent {
  LIKED
  RETWEETED
  REPLYED
  MENTIONED
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  tweetId   String
  userId    String
}
